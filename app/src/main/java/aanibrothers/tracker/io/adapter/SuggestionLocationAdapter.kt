package aanibrothers.tracker.io.adapterimport aanibrothers.tracker.io.databinding.*import android.content.*import android.graphics.*import android.location.*import android.view.*import androidx.recyclerview.widget.*import com.google.android.gms.maps.model.*import java.util.*import kotlin.collections.LinkedHashSetclass SuggestionLocationAdapter(val context: Context, val listener: ((Address) -> Unit)?) : RecyclerView.Adapter<SuggestionLocationAdapter.DataViewHolder>() {    private var currentLocation: LatLng? = null    private var textColor: String = "#000000"    private var suggestions = mutableListOf<Address>()    private var query: String = ""    fun updateData(suggestions: MutableList<Address>, query: String, textColor: String) {        this.textColor = textColor        this.query = query        this.suggestions.clear()        this.suggestions.addAll(suggestions)        notifyDataSetChanged()    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): DataViewHolder {        return DataViewHolder(LayoutRowItemSuggestionBinding.inflate(LayoutInflater.from(parent.context), parent, false))    }    override fun onBindViewHolder(holder: DataViewHolder, position: Int) {        holder.binding.apply {            if (position == 0 && currentLocation != null) {                textMapLocationArea.text = "Your location"                textMapLocationDetails.text = "Lat: ${currentLocation?.latitude}, Lng: ${currentLocation?.longitude}"                textMapLocationArea.setTextColor(Color.parseColor(textColor))                textMapLocationDetails.setTextColor(Color.parseColor(textColor))                root.setOnClickListener {                    val dummyAddress = Address(Locale.getDefault()).apply {                        latitude = currentLocation?.latitude ?: 0.0                        longitude = currentLocation?.longitude ?: 0.0                        featureName = "Your location"                    }                    listener?.invoke(dummyAddress)                }            } else {                val index = if (currentLocation != null) position - 1 else position                val suggestion = suggestions[index]                val mergedAddress = buildString {                    listOfNotNull(                        suggestion.thoroughfare,                        suggestion.subLocality,                        suggestion.locality,                        suggestion.adminArea,                        suggestion.postalCode,                    ).filter { it.isNotEmpty() }                        .toCollection(LinkedHashSet())                        .joinTo(this, ", ")                }                textMapLocationArea.text = query                textMapLocationDetails.text = "$mergedAddress"                textMapLocationArea.setTextColor(Color.parseColor(textColor))                textMapLocationDetails.setTextColor(Color.parseColor(textColor))                root.setOnClickListener { listener?.invoke(suggestion) }            }        }    }    override fun getItemCount(): Int {        return suggestions.size + if (currentLocation != null) 1 else 0    }    fun addCurrentLocation(current: LatLng?) {        currentLocation = current    }    class DataViewHolder(val binding: LayoutRowItemSuggestionBinding) : RecyclerView.ViewHolder(binding.root)}